name: Build and Upload Binaries

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, arm64]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

       # Install necessary tools for cross-compiling on arm64 (Ubuntu)
      - name: Install dependencies for arm64 (Linux only)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            binutils-aarch64-linux-gnu \
            libgcc-9-dev-arm64-cross

      - name: Set environment variables for arm64 cross-compilation
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: |
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
          export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar

      # Linux and macOS - Bash Shell
      - name: Install target for architecture (Linux and macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            rustup target add x86_64-unknown-linux-gnu
            rustup target add x86_64-apple-darwin
          elif [ "${{ matrix.arch }}" == "arm64" ]; then
            rustup target add aarch64-unknown-linux-gnu
          fi

      # Windows - PowerShell Shell
      - name: Install target for architecture (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          cd main
          if ($env:ARCH -eq "x86_64") {
            rustup target add x86_64-pc-windows-msvc
            echo "Binary built for Windows x86_64"
          }

      - name: Build ubuntu or mac
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cd main
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            if [ "${{ matrix.arch }}" == "x86_64" ]; then
              cargo build --release --target x86_64-unknown-linux-gnu
            # elif [ "${{ matrix.arch }}" == "arm64" ]; then
            # cargo build --release --target aarch64-unknown-linux-gnu
            fi
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            if [ "${{ matrix.arch }}" == "x86_64" ]; then
              cargo build --release --target x86_64-apple-darwin
            elif [ "${{ matrix.arch }}" == "arm64" ]; then
              cargo build --release --target aarch64-apple-darwin
            fi
          fi

      - name: Build windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          cd main
          if ($env:ARCH -eq "x86_64") {
            cargo build --release --target x86_64-pc-windows-msvc
            echo "Binary built for Windows x86_64"
          }

      # Add an ls command to debug target directory contents after build
      - name: Debug target folder after build
        run: |
          cd main
          echo "Listing target directory after build"
          ls -R target

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-bracket-cli
          path: |
            main/target/x86_64-unknown-linux-gnu/release/bracket
            main/target/aarch64-unknown-linux-gnu/release/bracket
            main/target/x86_64-apple-darwin/release/bracket
            main/target/aarch64-apple-darwin/release/bracket
            main/target/x86_64-pc-windows-msvc/release/bracket.exe
